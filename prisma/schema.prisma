datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  eventsOrganized    Event[]   @relation("Organizer")
  eventsParticipated Event[]   @relation("EventParticipants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Event {
  id                  String         @id @default(uuid())
  title               String
  startAt             DateTime
  endAt               DateTime
  location            String?
  description         String?
  isUnlimitedCapacity Boolean        @default(true)
  isFree              Boolean        @default(true)
  capacityValue       Int?
  timezone            String
  imageBase64         String?        @db.Text
  hashtags            EventHashtag[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  organizerId         String
  organizer           User           @relation("Organizer", fields: [organizerId], references: [id], onDelete: Cascade)
  participants        User[]         @relation("EventParticipants")
  participantsCount   Int            @default(0)
}

model Hashtag {
  id        String         @id @default(uuid())
  name      String         @unique
  events    EventHashtag[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model EventHashtag {
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId String

  @@id([eventId, hashtagId])
}
